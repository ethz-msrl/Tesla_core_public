# Navion Integration Test
# A specific Navion CI test which uses the Navion specifications and a workflow according to our instructions.

name: navion_integration_test  

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:  
  navion_build_and_test:
    runs-on: ubuntu-18.04
    env:
      ROS_DISTRO: melodic
      ROS_CI_DESKTOP: "`lsb_release -cs`"  # e.g. [trusty|xenial|...]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Install ROS
        run: |
          sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
          sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
          sudo apt-get update -qq
          sudo apt-get install dpkg
          sudo apt-get install -y python-catkin-tools python-rosdep python-wstool ros-$ROS_DISTRO-ros-base
          source /opt/ros/$ROS_DISTRO/setup.bash
          # Prepare rosdep to install dependencies.
          sudo rosdep init
          rosdep update --include-eol-distros  # Support EOL distros.
      - name: Install Dependencies
        run: sudo apt update && sudo apt install swig libyaml-cpp-dev qtbase5-dev qt5-default libqt5quick5 qtdeclarative5-dev qtquickcontrols2-5-dev qml-module-qtquick-layouts qml-module-qtquick-controls2 qml-module-qtquick-controls qml-module-qtquick-extras -y
      - name: Create Workspace
        run: |
          mkdir -p ~/tc_ws/src
          cd ~/tc_ws
          catkin init
          catkin config --extend /opt/ros/$ROS_DISTRO
          catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release
          catkin config --install
      - name: Rosinstall deps   
        run: |
          cd ~/tc_ws/src
          git clone https://${{ secrets.NAVION_MSRL_READ_TOKEN }}@github.com/ethz-msrl/Navion.git
          sed -i 's|git@github\.com:|https://${{ secrets.NAVION_MSRL_READ_TOKEN }}@github\.com/|g' ~/tc_ws/src/Navion/dependencies.rosinstall
          wstool init
          wstool merge Navion/dependencies.rosinstall -y
          # Replacing Tesla_core master branch by current branch
          wstool rm Tesla_core
          wstool update
          ln -s $GITHUB_WORKSPACE ~/tc_ws/src/Tesla_core
          sed -i 's|git@github\.com:|https://${{ secrets.NAVION_MSRL_READ_TOKEN }}@github\.com/|g' ~/tc_ws/src/Tesla_core/dependencies.rosinstall
          wstool merge Tesla_core/dependencies.rosinstall -y
          wstool update
      - name: Rosdep install
        run: |
            cd ~/tc_ws
            rosdep install --from-paths src --ignore-src -r -y
      - name: Catkin Build
        run: |
            cd ~/tc_ws
            # Set required parameter to test for failure:
            sed -i 's|respawn="true"|required="true"|g' ~/tc_ws/src/Navion/nav_launch/launch/navion.launch
            catkin build nav_launch -j 8 -l 8 --no-status --summarize 
      - name: Integration Testing
        run: |
            # The changed navion.launch file shuts down every node if one of them crashes. 
            # This leads to the termination of the ROS master and exit code 1 is outputted when calling 'rosnode list'. Otherwise,
            # exit code 0 is returned after 30s.
            cd ~/tc_ws
            source ~/tc_ws/install/setup.bash
            rosrun roslaunch roslaunch-check ~/tc_ws/src/Navion/nav_launch/launch/navion_gui.launch
            roslaunch nav_launch navion.launch &
            sleep 30
            echo Trying to access master as a test...
            echo If this test fails, check if you can build and run in install-space on your local machine, e.g. all files added to install space
            rosnode list
            # rosnode list | grep backward_model | grep forward_model | grep mns_broadcaster | grep nav_controller | grep nav_gui | grep ps4_controller_node | grep ps4_joy
            exit 0
            
