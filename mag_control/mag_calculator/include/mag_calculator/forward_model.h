//
// Tesla - A ROS-based framework for performing magnetic manipulation
//
// Software License Agreement (BSD License)
//
// ©2022 ETH Zurich, D-​MAVT; Multi-Scale Robotics Lab (MSRL) ; Prof Bradley J. Nelson
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms,
// with or without modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above
//   copyright notice, this list of conditions and the
//   following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * All advertising materials mentioning features or use of this software
//   must display the following acknowledgement:
//   “This product includes software developed by the Multi-Scale Robotics Lab, ETH Zurich,
//   Switzerland and its contributors.”
//
// * Neither the name of MSRL nor the names of its
//   contributors may be used to endorse or promote products
//   derived from this software without specific prior
//   written permission of MSRL.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
// WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pragma once

#include <string>

#include <ros/ros.h>
#include <ros/time.h>
#include <tf/transform_listener.h>

#include <Eigen/Dense>

#include "mag_manip/forward_model.h"

// srv
#include "mag_calculator/get_magnetic_field.h"
#include "mag_calculator/load_calibration_file.h"

// msgs
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/PoseArray.h"
#include "mag_msgs/CurrentsStamped.h"

#include <dynamic_reconfigure/server.h>
#include <mag_calculator/ForwardModelConfig.h>

namespace mag_calculator {

/**
 * @brief A node for computing magnetic fields generated by a magnetic
 * manipulation system at different positions.
 *
 * ForwardModel should allow users to compute quasi-static magnetic fields and
 * gradients by way of ROS messages defining the electromagnet currents.
 */
class ForwardModel {
 public:
  /**
   * @brief Default constructor
   *
   * @param nh: the public NodeHandle
   * @param nh_private: the private NodeHandle
   * See package mag_manip for more info.
   */
  ForwardModel(ros::NodeHandle& nh, ros::NodeHandle& nh_private);

 private:
  /**
   * @brief Publish magnetic field array
   */
  void publishMagneticFields();

  ////////////////////
  ///   Callbacks  ///
  ////////////////////

  /**
   * @brief Callback for the dynamic configuration server
   *
   * @param config: configuration structure
   * @param level
   */
  void dynCallback(mag_calculator::ForwardModelConfig& config, uint32_t level);

  /**
   * @brief Update stored currents and publish magnetic field array
   *
   * @param msg: the currents message
   */
  void currentsSub(const mag_msgs::CurrentsStamped& msg);

  /**
   * @brief Update the stored pose array
   *
   * @param msg: the pose array at which to make calculations
   */
  void poseArraySub(const geometry_msgs::PoseArray& msg);

  /**
   * @brief Callback for the load_calibration service
   *
   * @param req: request containing calibration file
   * @param resp: the response (not used)
   *
   * @return true if setting the calibration file succeeded
   */
  bool loadCalibrationSrv(mag_calculator::load_calibration_file::Request& req,
                          mag_calculator::load_calibration_file::Response& resp);

  /**
   * @brief Callback for the get_magnetic_field service
   *
   * The magnetic field is requested at an array of positions
   *
   * @param req: request containing the positions at which to calculate the
   * fields and the electromagnet currents
   * @param resp: response (not used).
   *
   * @return true if computing the field succeeded
   */
  bool getMagneticFieldSrv(mag_calculator::get_magnetic_field::Request& req,
                           mag_calculator::get_magnetic_field::Response& resp);

  ros::NodeHandle nh_;         /**< the public NodeHandle */
  ros::NodeHandle nh_private_; /**< the private NodeHandle */
  std::string cal_path_;       /**< the filename of the magnetic calibration */
  std::string cal_type_;       /**< The type of model see
                                  mag_manip::ForwardModelFactory for info */
  std::string mns_frame_id_;   /**< this is what the MNS frame is called, usually just mns */

  unsigned int num_coils_; /**< The number of coils in the magnetic system */

  std::string frame_id_;              /**< If this is different from mns,
                                        calculations will be made in this frame */
  tf::TransformListener tf_listener_; /**< Listens to transforms
                                        between the mns frame and the desired frame */

  mag_manip::ForwardModel::Ptr p_forward_model_; /*<< Pointer to the magnetic model */

  dynamic_reconfigure::Server<mag_calculator::ForwardModelConfig>
      dyn_server_; /**< The dynamic configuration server */
  dynamic_reconfigure::Server<mag_calculator::ForwardModelConfig>::CallbackType
      f_; /**< The dynamic configuration callback function */

  geometry_msgs::PoseArray poses_;         /**< Pose at which the magnetic fields are computed */
  mag_msgs::CurrentsStamped currents_msg_; /**< Currents used to calculate fields */

  ros::ServiceServer srv_load_cal_file_; /**< Service to load a magnetic calibration file */
  ros::ServiceServer srv_get_field_;     /**< Service to calculate a magnetic
                                                field at several positions */

  ros::Subscriber sub_pose_;     /**< Subscriber to current pose array */
  ros::Subscriber sub_currents_; /**< Subscriber to currents */
  ros::Publisher
      pub_field_array_; /**< Publisher for the magnetic field array calculated from currents */
  bool publish_field_aligned_grad_array_; /**< If this is set to true, then the field aligned
                                             gradient array is published */
  bool display_warning_zero_field_; /**< If this is set to true, the warning that the field is near
                                       zero is generated */
  bool is_field_inverted_;          /**< Inverted magnetic field
                                      Use when magnet has inverted magnetization
                                     */
  ros::Publisher pub_dipole_grad_array_; /**< Publisher for the field aligned gradient array */
};
}  // namespace mag_calculator
